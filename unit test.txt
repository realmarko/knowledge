unit test
	avoid introduce bugs
	avoid break existing code
naming conventions methods 
classname_methodname_expectedresult

example
public static void WorldsFunction_ReturnPikaIfZero_ReturnString(){
	//arrange - go get your variables, classes,functions
	int nume =0;
	WorldsFunction worlds = new WorldsFunction();
	//act -Execute the function
	string result = worlds.ReturnsPikeIfZero(num);

	//assert
	Assert.Equals()
	}
***********************************
xunit and fluent assertions

//install fluent assertions
create a new xunit project
	[Fact] // attribute to use in the methods
examples with fluent assertion in xunit
	string data = "";
	data.Should().NotBeNull()
	
	[Theory]
	[InLineData(1,1,2)]
	[InLineData(2,2,4)]
	public void NEtwork_Ping_ReturnInt(int a, in b, int expected)
	{
		//arrange
		var pingService = new NetworkService();
		//act
		var res = pingService.PingTimeout(a,b)
		//assert
		result.ShouldBe(expected);
		result.ShouldBe().BeGreaterThanOrEqualTo(3);
	}

***********************************
to work with mock
install-package Moq
	first declare the interfaces
	Mock<IArticulosRepository> articuloRepo = new Mock<IArticulosRepository>();
	Mock<IAutorRepository> autorRepo = new Mock<IAutorRepository>();
	
	//use the setup method
	//Podemos utilizar la clase It.IsAny<T>()  el cual significa que acepta cualquier objeto de ese tipo.
	autorRepo.Setup(a => a.AutorValido(It.IsAny<int>()))
 	con su .Return()
	La propiedad .Object
	El m√©todo .Verify() 
