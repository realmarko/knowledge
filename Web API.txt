WEB API
Caching
	no-cache
	no-store
	max-age
	private
	
Authentication
	when we create the project we have 
	chage authentication 
		=>No authentication
		=>individual user accounts (use membership database)
		=>work and school accounts
		=>Windows authentication
				
		to protect a method we use [Authorize]
		
		to pass the token to a service in webapi
		we use Authorization:Bearer access_token_value
		
		to get the token we have the function in the method 
		inside Startup.Auth.cs
		ConfigureAuth(IAppBuilder app)
		{
		//here is the get token
		}
		
		to pass the token we need to pass it in the header of the request
			
	JSON Web token 
		JSON Web Token (JWT) is the approach of securely transmitting data across 
		communication channel. For authentication and authorization, it uses the technique of passing digitally signed tokens
		is formed of three strings
		-header
		-payload
		-signature
		User sends this token with each request, normally in header or cookies and then received token is decrypted to validate claim.
		there are libraries for the jwt=> System.IdentityModel.Tokens.Jwt library for generating and validating tokens
		AuthenticationModule is where the downloaded library is used
		to use jwt we can create an filter
		public class JWTAuthenticationFilter : AuthorizationFilterAttribute
		{
			public override void OnAuthorization(HttpActionContext filterContext)
			{
				if (!IsUserAuthorized(filterContext))
				{
					ShowAuthenticationError(filterContext);
					return;
				}
				base.OnAuthorization(filterContext);
			}
		}
		The returned token is passed as header in each request and the actual verification is done through IsUserAuthorized method in our custom filter
		IPrincipal should be populate by the authentiationfilter or message handler responsible for authentication, and if it's not there,
		the user will be denied access
REST is an "architectural style" that basically exploits the existing technology and protocols of the Web.
RESTful is typically used to refer to web services implementing such an architecture
		
/************************************************************************************************************************/
//If we want to return a type different of xml or json
//we can use MediaTypeFormatter

/************************************************************************************************************************/
to use SSL we can 
/************************************************************************************************************************/
Message handlers
	Is a class that receives an HTTP request and returns an  HTTP response
	When we want to implement security in all the request
	When we want to implement logging in all the request
	
/************************************************************************************************************************/
DEPENDENCY INJECTION
		The main idea with DI is develop a project with maintainable code
		We can develop DI in three ways
			Constructor Injection
			Property Injection
			Method Injection
		public class SchoolBusinessLayer :ISchoolBusinessLayer
		{
			private ISchoolDataAccessLayer _objSchoolDal;
			public SchoolBusinessLayer(ISchoolDataAccessLayer objSchoolDal)
			{
				_objSchoolDal = objSchoolDal;
			}
			public School GetSchoolinformation()
			{
				return _objSchoolDal.GetSchoolinformation();
			}
		}
		
	And we need to use simple Injector
	Install-Package Simple Injector.Integration.WebApi -Version 3.1.5
	
	In Gloabal.asax.cs, make a container with the help of a Simple Injector, 
	Container Register Interface and there is a respected class and at the end, verify all.
		var container = new Container();
		container.Register<ISchoolDataAccessLayer, SchooDataAcessLayer>();
		container.Register<ISchoolBusinessLayer, SchoolBusinessLayer>();
		container.Verify();
		
		DependencyResolver.SetResolver(new SimpleInjectorDependencyResolver(container));
		GlobalConfiguration.Configuration.DependencyResolver = new SimpleInjectorDependencyResolver(container);
	
/************************************************************************************************************************/
Pipeline
	The chain of built-in and custom message handlers and filters that the HTTP request and response "flow" throughto reach and return from your controller
	Action methods.
The pipeline is where you extend the behaviour of your services
	Custom http headers
	Authentication and authorization tokens
	Metrics, Logging
	Content Negotiation
	Basically outside of the Business logic os your Action Method
	
	The route tables is inside the method register in WebApiConfig.cs
Also we can create an Api related to Azure in the option Azure Api
	this provides swager
		and application insights(Monitoring and analithics modulefor Azure services)
/************************************************************************************************************************/
Integration TEST
	make the test in the pipeline
	we send all the headers, all the verbs, all the tokens
	
	Tools to test
		Fiddler
		Postman
		Swachbuckle
		
/************************************************************************************************************************/
To validate Route attributes using constraints
[HttpGet, Route("{id:int:range(1000,3000)}")]	
	to create a new constraint we need inhereted from IHttpRouteConstraint
	
	example public class EnumerationConstraint:IHttpRouteConstraint
	{
	}
	
	and we need to add the constraint in WebApiConfig.cs
	//Web API routes
	//config.MapHttpAttributeRoutes();
	var constraintResolver = new DefaultInlineConstraintResolver();
	constraintResolver.ConstraintMap.Add("enum", typeof(EnumerationConstraint));
	config.MapHttpAttributeRoutes(constraintResolver);
	
	//if I want override the prefix attribute 
	we use "~"
	[Route("~/prods")]
	
	//to get the value fromuri
	string uri = Url.Link("GetById",new {id = prodId});
	
	//to add an default value we need to do the next
	[HttpGet, Route("status/{status:alpha=pending}/{id:int=5}")]
	or
	[HttpGet,Route("status/{status:alpha}")]
	public string GetProductsWithStatus(string status="pending")
	{}
	
	//To bind parameters in Web Api, I need to create my own binder using IModelBinder
	
	

	
/************************************************************************************************************************/
Basic Authentication
	Request to API enpoints protected by Basic Authentication should contain an Authorization header and base 64 encoded username and password,
	concatenated with a colon,  and preceded by a Basic keyword
	Example:
		Authorization: Basic ZmlsaXA6YWJj
		
	Thinktecture requires SSL 
/************************************************************************************************************************/
Delegating Handlers
	This happends before routing thats occurs
	
To create a delegating handler we need to implement from DelegatingHandler
	
To register a delegatin handler
	In the WebConfigApi.cs inside the Register method
	config.MessageHandlers.Add(new DelegatingHandlerTemplate());
	
To get the value of apikey
	we can use HttpRequestMessageApiKeyExtension
	and inside the controller return the value with Request.GetApiKey();
	
	
/************************************************************************************************************************/	
The pipeline of the web api
	Request
		httprequestMessage
		delegating handlers
		routing logic => select controller, method
		authentication filter
		authorization filter
		model binding(formatters)
		actionfilter
		controller / method
	Response
		actionfilter
		result conversion(formatters)
		ExceptionFilter
		routing logic => select controller, method
		delegating handlers
		HttpResponseMessage
Message handlers are usefull for
	Check validations such as abscence or presence of headers
	Direct manipulation for the request and the response
	DON'T do authentication in the delegating handler
/************************************************************************************************************************/	
To check if the request contains a value
	request.Headers.Contains(apiKeyHeader);
To get some value from the request
	request.Headers.GetValues(_apiKeyHeader).FirstOrDefault();
	or
	request.GetQueryNameValuePairs().FirstOrDefault(a=>a.Key.ToLowerInvariant().Equals(_apiQueryString));
To save values from the request
	request.Properties.Add(apiKeyheader,apiKey);
/************************************************************************************************************************/
ActionFilters
	is executed after Authentication and Authorization Filters
	dont use for authentication or authorization	
	has two methods
		OnActionExecutingAsync()
		OnActionExecutedAsync()
		
	we can register globally
		WebApiConfig.cs->inside the register method
			config.Filters.Add(new ActionFilterTemplateAttribute());
		if I only want register for a specific controller I nee put the attribute in the controller
	to override filter I can use the attribite [OverrideActionFilters]
		[OverrideActionFilters]
		[ActionFilterTemplate]
		public string Get(int id)
		{
			return "value";
		}
/************************************************************************************************************************/
Caching
	Public: The response could be cached by intermediate device between the clinet and the serverlike a proxy-server 
	Private: Browser-only, no intermediate caching, typicatlly for per-user secure data
	No cache

/************************************************************************************************************************/
example of get
[HttpGet("{id:int}", Name = "GetVilla")]
[ProducesResponseType(200, typeof(VillaDTO))]
[ProducesResponseType(404)]
[ProducesResponseType(400)]
public ActionResult<VillaDTO> GetVilla(int id)
{
	if(id===0)
	{
		return BadRequest();
	}
	var villa = VillaStore.villaList.FirstOrDefault(u=>u.Id == id);
	if(villa == null)
	{
		return NotFound();
	}
	return Ok(villa);
}


[HttpPost]
public ActionResult CreateVilla([FromBody villaDTO]){
	if(!ModelState.IsInvalid)
	{
		return BadRequest(ModelState);
	}
	if(villaDTO == null)
	{
		return BadRequest(villaDTO)
	}
	if(villaDTO.id > 0)
	{
		return StatusCode(StatusCodes.Status500InternalServerError);
	}
	villaDTO.id = VillaStore.villaList.OrderByDescending(u=>u.Id)FirstOrDefault().Id + 1;
	VillaStore.villasList.Add(villaDTO);
	return Ok(VillaDTO);
	//instead of return ok we can redirect
	return CreatedAtRoute("GetVilla", new {id = villaDTO.Id},villaDTO);

}
//and we need to add in the top of the method
//[ProducesResponseType(StatusCodes.Status201Created)]


//to make a custom validation
if(VillaStore.villaList.FirstOrdDefault(u=>u.Name.ToLower() == villaDTO.Name.ToLower()))
{
	ModelState.AddModelError("CustomError","Villa already Exists!");
	return BadRequest(ModelState);
}


//The first parameter in the CreatedAtAction method call represents an action name. 
//The nameof keyword is used to avoid hard-coding the action name. 
//CreatedAtAction uses the action name to generate a location HTTP response header with a URL to the newly created pizza

[HttpPost]
public IActionResult Create(Pizza pizza)
{            
    PizzaService.Add(pizza);
    return CreatedAtAction(nameof(Get), new { id = pizza.Id }, pizza);
}

[HttpPut("{id}")]
public IActionResult Update(int id, Pizza pizza)
{
    if (id != pizza.Id)
        return BadRequest();
           
    var existingPizza = PizzaService.Get(id);
    if(existingPizza is null)
        return NotFound();
   
    PizzaService.Update(pizza);           
   
    return NoContent();
}

[HttpDelete("{id}")]
public IActionResult Delete(int id)
{
    var pizza = PizzaService.Get(id);
   
    if (pizza is null)
        return NotFound();
       
    PizzaService.Delete(id);
   
    return NoContent();
}

[ProducesResponseType(StatusCodes.Status204NoContent)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
[HttpDelete("{id:int}")]
public IActionResult DeleteVilla(int id){
	if(id == 0 )
	{
		return BadRequest();
	}
	var villa = VillaStore.villaList.FirstOrDefault(u=>u.Id == id);
	if(villa == null)
	{
		return NotFound();
	}
	VillaStore.villaList.Remove(villa);
	return NoContent();
}

[HttpPut("{id:int}", Name = "UpdateVilla")]
public IActionResult updateVilla(int id, [FromBody]VillaDTO villaDTO)
{
	if(villaDTO == null || id != villaDTO.Id)
	{
		return BadRequest();
	}
	var villa = VillaStore.VillaList.FindFirstOrDefault(v=> v.Id == id)
	villa.Name = VillaDTO.Name;
	villa.Sqft = VillaDTO.Sqft;
	villa.OCupancy = villaDTO.Occupancy;

	return NoContent();
	
}


//to use Path
install the nuget package 
Microsoft.AspNetCore.JsonPatch
Microsoft.AspNetCore.Mvc.NwetonsoftJson

the request body to patch
[{
	path:"/name",
	"op": "replace",
	"value": "string"
}]

[HttpPatch("{id:int}", Name = "UpdatePartialVilla")]
[ProducesResponseTypes(StatusCodes.Status204NoContent)]
[ProducesResposesTypes(StatusCodes.Stattus400BadRequest)]
public IActionresult UpdatePartialVilla(id,JsonPatchDocuent<VillaDTO> patchDTO)
{
	if(patchDTO == null || id == 0)
	{
		return BadRequest();
	}
	var villa = VillaStore.villaList.FindFirstOrdefault(v=>v.Id == patchDTO.id)
	if(villa == null)
	{
		return NotFount();
	}
	patchDTO.ApplyTo(villa,ModelState);
	if(!ModelState.IsValid)
	{
		return BadRequest();
	}
	return NoContent();
	
}
******************************************
Logger
install Serilog,serilog.sink.file,serilog.sinks.console
in program.cs
Log.Logger = new LoggerConfiguration().MinimumLevel.Debug()
.WriteTo.File("log/villaLogs.txt",rollingInteval:RollingInterval.Day).CreateLogger();
builder.Host.UseSerilog();


/************************************************************************************************************************/
public class TransctionMiddleware
{
	public TransactionMiddleware(RequestDelegate next)
	{
		_next= net;
	}

	public async Task InvokeAsync(HttpContext context)
	{
		context.Response.Headers.Append("X-Transaction-Id,Guid.NewGuid().Transaction-Id;
		await _next(context);
	}
	
	public static class TransactionMiddlewareExtensions
	{
		public static IApplicationBuilder UseSubscribePlease(
		this IApplicationBuilder builder
		{
			return builder.UseMiddleware<TransactionMiddleware>();
		}
	}
}
