NodeJS
//nodejs use V8 that is the engine created by google
//to check the version 
node -v

//All the configuration is in the file Package.json

/************************************************************************************************************************/
/*we create the folder where we want the nodejs app
install the stable version of nodejs
	after npm init

despues entramos a vs code
	and execute npm install --save express (framework for nodejs)
	create a new file called server.js
	and we add the next code*/
		const http = require('http');
		const port = process.env.PORT || 3000;
		const server = http.createServer();
		server.listen(port);

	//after that we add app.js and we put this code
	npm install --save express
		const express = require('express');
		const app = express();

		app.use((req, res,next)=>{
			res.status(200).json({
				message:'It works!'
			})
		});
		module.exports = app;
	
	/******************************************************************/
	/*we can install nodemon 
	this is going to help for we dont need to restart the server*/
	npm install nodemon --save-dev 
	//if the command nodemon is not recognized then we need to install globaly
	npm install nodemon -g 
	
	//and add the next line in package.json inside script area
	"scripts" : {
		"start":"nodemon server.js"
	}
	/******************************************************************/
	/*Error types
		-Syntaxis errors
		-Runtime errors
		-Logical errors*/
	/******************************************************************/
	/*Express.js alternatives
	Vanilla nodejs
	Adonis.js
	Koa
	Sails.js*/
	/******************************************************************/
	//For logging
	const morgan = require('morgan');
	
	npm install --save morgan
	//and we add in app.js
	/******************************************************************/
	//handling errors in nodejs
	app.use((req, res, next) => {
		const error = new Error('Not found');
		error.status=404;
		next(error);
	});

	app.use((error, req, res, next) => {
		res.status(error.status || 500);
		res.json({
			error: { message: error.message }
		});
	});
	/******************************************************************/
	//CORS and Parsing the body
	npm install --save body-parser
	const bodyParser = require('body-parser');
/**********************************************************************/
//Spread operator
//	create a copy of the element + new elements
	const hobbies = ['Sports','Cooking'];
	const copiedArray = [...hobbies];
	
//	if I want to copy an object
	const copiedObject = {...person};
	/**********************************************************************/
//Rest operator
//merge multiple arguments into an array

const f = toArray(...args)=>{
	return args;
}
// the result would be [1,2,3,4]
/************************************************************************************************************************/

//DEstructuring(get the values that we need of the object)
//example:
const person ={
	name:'Max',
	age:29
};
const printName = ({name})=>{
	console.log(name);
};
printName(person);

/************************************************************************************************************************/
	kelectsan
	clcloud
	hilight method
	continuo break
	partial class
	indexer
	assembly
	create public assembly
	trotling
	let and var
/************************************************************************************************************************/
/*TEMPLATE LITERALS
It's a different way of writing strings.
you can dynamically add data into a string like this:
example:*/
const name = "Max";
const age = 29;
//console.log(`My name is ${name} and I am ${age} years old.`);	
/************************************************************************************************************************/
/*Core modules
	http	:Launch server / send request
	htpps	:Launch a SSL server
	fs		:
	path
	os
	
when we add "./" we are refering to a local file
example:*/
const http = require('./http');
//without that we are not refering to a local file
const http = require('http');
/************************************************************************************************************************/
//to create a server
const http = require('http');

function rqListener(req,res)
{
}
const server = http.createServer(rqListener);

or we can do the next
const server = http.createServer((req,res)=>{
});

//and after listen for incoming request
server.listen();
/************************************************************************************************************************/
//npm = node package manager
//the command to initialize the code is in
//package.json in the scripts "section" y luego en "start"
	 "scripts": {
		"test": "echo \"Error: no test specified\" && exit 1",
		"start": "node app.js",
		"start-server": "node app.js"
	  },
	  
//to start a server we can use 
npm start

//to isntall nodemon in production mode
npm install nodemon --save
//to install nodemon in dev mode
npm install nodemon --save-dev
	and after install we will see in package.json
	  "devDependencies": {
    "nodemon": "^1.19.2"
  }

//to install globaly
npm install nodemon -g
nodemon restart the server when find some changes
/************************************************************************************************************************/
//to debug
//We need to go to the menu Debug-> start debugging
//we can add a configuration
   "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program Debug",
            "program": "${workspaceFolder}\\index.js",
            "restart":true, // this is tp restart the debugger automatically
            "console": "integratedTerminal"
        }
    ]
/************************************************************************************************************************/
/*CREAR UN NUEVO PROJECTO
crear la carpeta
	mkdir ejemplo
ir a la carpeta
 cd ejemplo
instalar package.json
	npm init
	
abrimos la app en visual studio code
creamos el archivo.js
instalamos express
	npm install express --save
utilizamos 
node app.js
utilizar nodemon para reiniciar el server automatically
npm install nodemon --save
nodemon server.js*/
/************************************************************************************************************************/
//LIMITING THE MIDDLEWARE TO GET OR POST
app.get('/product',(req,res,next)=>{
	res.redirect('/');
});
/**********************************************************************/
//USING EXPRESS ROUTER
//create a folder Routes and inside the Files.js
//example admin.js
const express = require('express');
const router = express.Router();
router.use('/add-product',(req,res,next) =>{
	res.send('');
})

//and inside app.js
const adminRoutes = require('./routes/admin');
app.use(adminRoutes);
/**********************************************************************/
//Adding a 404 Error Page
app.use(req,res,next)=>{
	res.status(404).send('<h1>Page not found</h1>');
}
/**********************************************************************/
Dynamic routes
	Passing route params
	Using query params

	Example:
		router.get('/product/:productId',productController.getProduct);

	In the comtroller(implementation)
		exports.getProduct = (req,res,next) =>{
			const productId = req.params.productId;
			Product.findById(productId,product =>{
				console.log(product);
			})
		}
	In the model Product.js
		static findById(id,cb){
			getProductFromFile(products =>{
				const product = product.find(p=>p.id === id);
				cb(product);
			})
		}
	video 116
/**********************************************************************/
query parameters
	when we receive values from URL
	example 
	local.com/page/123?edit=true&title=new
	
	inside the controller 
	exports.getEditProduct = (req,res,next) =>{
		const editMode = req.query.edit; 
	}
/**********************************************************************/
FILTERING PATHS
we can add a prefix in app.js
	app.use('/admin',adminRoutes);
/**********************************************************************/
To show a file inside the directory
	const path = require('path');
	
	route.get('/',(req,res,next)=>{
		res.sendFile(path.join(__dirname,'../','views',
		'shop.html'));
	});
/**********************************************************************/
HELPERS
	Create util folder
	path.js
		const path = require('path');
		module.exports = path.dirname(process.main.Module);
	and in shop.js
		const rootDir = require('../util/path');
		and change 
			router.get('/add-product',(req,res,next)=>{
			res.sendFile(path.join(rootDir,'views','add-product'));
			})
